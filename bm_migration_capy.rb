require 'open-uri'
require 'nokogiri'
require 'mechanize'
require 'json'
# require 'sqlite3'
require 'csv'
require 'capybara/dsl'
require 'capybara/poltergeist'
# require 'timeout'

# NokogiriしきれないのでCapybaraを入れる

require './setting'
# ログイン用ID/PASS用ファイル
# mail = 'mail@mail.com'
# passwd = 'pass'

# リニューアル対応版

# $DEBUG = 1

$log = Logger.new(STDOUT)
$log.level = Logger::DEBUG

Capybara.configure do |config|
  config.run_server = false
  config.current_driver = :poltergeist
  config.javascript_driver = :poltergeist
  config.app_host = 'https://elk.bookmeter.com/'
  config.default_max_wait_time = 5
  config.automatic_reload = false
end

Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new(app, {:js_errors => false, :timeout => 5000 })
end

class String
  def sjisable
    str = self
    #変換テーブル上の文字を下の文字に置換する
    from_chr = "\u{301C 2212 00A2 00A3 00AC 2013 2014 2016 203E 00A0 00F8 203A}"
    to_chr   = "\u{FF5E FF0D FFE0 FFE1 FFE2 FF0D 2015 2225 FFE3 0020 03A6 3009}"
    str.tr!(from_chr, to_chr)
    #変換テーブルから漏れた不正文字は?に変換し、さらにUTF8に戻すことで今後例外を出さないようにする
    str = str.encode("Windows-31J","UTF-8",:invalid => :replace,:undef=>:replace).encode("UTF-8","Windows-31J")
  end
end #http://qiita.com/yugo-yamamoto/items/0c12488447cb8c2fc018

class BookInfo

  include Capybara::DSL

  def initialize
      # @dbfile = 'bookdata.db'
      @user_id = ''
      @base_url = 'https://elk.bookmeter.com'
      @my_url = @base_url + '/users' + @user_id
      @login_url = @base_url + '/login'
      @list_type = ["read", "reading", "stacked", "wish"] # 読んだ, 読んでる, 積読, 読みたい
      @w_org = 1  # 1=>オリジナル含む 0=>含まない
  end

  def get_nokogiri_doc(url)
    begin
      if $DEBUG
        html = open(url) #, :proxy => 'http://localhost:5432')
      else
        html = open(url)
      end
    rescue OpenURI::HTTPError
      return
    end
    Nokogiri::HTML(html, nil, 'utf-8')
  end

  def get_nokogiri_doc_from_html(html)
    Nokogiri::HTML(html, nil, 'utf-8')
  end

  def wait_for_ajax
    Timeout.timeout(Capybara.default_max_wait_time) do
      active = page.evaluate_script('jQuery.active')
      until active == 0
        active = page.evaluate_script('jQuery.active')
        sleep(0.5)
      end
    end
  end

  def login
    page.driver.headers = { 'User-Agent' => 'Mac Safari' }
    if page.driver.browser.cookies.empty?
      $log.debug("started login.")
      visit @login_url
      page.find("input[name='session[email_address]']").send_keys $mail
      page.find("input[name='session[password]']").send_keys $passwd
      page.find("button[name='button']").click
      $log.info("finished login.")
    else
      $log.debug("already logged in.")
    end
  end

  def get_user_id
    if @user_id.empty?
        visit(@base_url + '/home')
        a = page.find('dt.user-profiles__avatar > a')['href']
        @user_id = a.to_s.gsub('https://elk.bookmeter.com/users/','')
        # https://elk.bookmeter.com/users/*****
    end
    $log.debug("id is #{@user_id}")
  end

  def fetch_ids
    bIDs = []
    @list_type.each do |type|
      list_url = @my_url + '/' + (@user_id).to_s + '/books/' + type
      page_max = get_page_max(list_url)
      $log.debug("#{type}'s pagemax is #{page_max}.")
      (1..page_max).each do |i|
        each_list_url = list_url + '?page=' + i.to_s
        page = get_nokogiri_doc(each_list_url)
        page.search("//div[@class='thumbnail__cover']/a/@href").each do |node|
          bID = node.to_s[7..-1]
          bIDs.push(bID)
        end
        $log.debug("fetch #{type}: page #{i}.")
        sleep(1)
      end
      $log.debug("fetch all page of [#{type}].")
    end
    bIDs.uniq!
    $log.info("fetch all ID: #{bIDs}")
    return bIDs
  end

  def get_page_max(url)
    visit url
    begin
      saigo = find_link('最後')['href']
      max = $1.to_i if saigo =~ /.*page=(\d+)$/
    rescue Capybara::ElementNotFound => e
      max = 2 #念のため2ページまで拾ってみる
    end
    return max
  end

  def fetch_bookdata_json(ids)
    bookdata = []
    # 本ごとの情報取得
    ids.each_with_index do |id, idx|
      # wait_for_ajax
      each_book_url = @base_url + '/books/' + id
      page.visit each_book_url
      doc = get_nokogiri_doc_from_html(page.html)
      begin
        # 複数modalがあるときにどうするのか。＝＞先に登場するほう（新しい方）を活かす（とりあえず）
        json = doc.search("//div[@class='read-book__action']/div/div/@data-modal")[0].to_s
        # 「読んだ本」に登録されていない場合
        json = doc.search("//section[@class='sidebar__group']/div[2]/ul/li[1]/div/@data-modal")[0].to_s if json.empty?
      rescue Capybara::ElementNotFound => e
        $log.error("書籍情報が取得できませんでした。book_id: #{id}")
        next
      end
      json = json.gsub(/[\r\n]/m, '' )
      _bookdata = JSON.parse(json)
      _bookdata['status'] = get_book_status # 0 読んだ < 1 読んでる < 2 積読 <  3 読みたい
      bookdata.push _bookdata
      $log.info("fetched: #{_bookdata['book']['title']} [#{id}] (#{idx+1}/#{ids.size})")
      sleep(0.5)
    end
    bookdata
  end

  def get_book_status
    status = []
    doc = get_nokogiri_doc_from_html(page.html)
    classes = doc.search("//section[@class='sidebar__group']/div[2]/ul/li/@class")
    classes.each_with_index do |st, idx|
      status.push(idx) if st.to_s.include?('active')
    end
    status
  end

  def scrape
    login
    get_user_id
    ids = ["550663", "5148925", "11467472", "11467471", "10737226", "576591", "11059496", "575269", "9121704", "221390", "669561", "11204078", "6727708", "568494", "11079161", "11208157", "570421", "11255532", "11250107", "574488", "9282785", "4318617", "566758", "478904", "573461", "11171675", "11227458", "7324376", "5249882", "587462", "9017630", "4057107", "11034560", "9089404", "537766", "11155097", "7476079", "8107754", "8108971", "9737011", "4507084", "1796907", "6749528", "1343038", "579888", "10241569", "10910521", "12170", "10640426", "4523717", "10434597", "7859821", "568468", "557036", "397184", "556742", "566931", "9897818", "9829121", "7844916", "576742", "504754", "554427", "7380829", "9865488", "566119", "577710", "577708", "575488", "9765234", "6512507", "218073", "6971891", "9810328", "4011465", "577713", "573068", "9730746", "575486", "3339718", "552631", "8970066", "9258995", "477113", "566929", "507593", "2987967", "484181", "501342", "6519334", "571747", "453293", "576086", "8418225", "404708", "454720", "38017", "527320", "517913", "8991541", "7392185", "4071510", "124997", "555882", "554162", "12490", "517912", "8618650", "8296227", "407120", "566926", "5616075", "517916", "457964", "913706", "8220975", "128", "7952861", "568785", "403797", "545683", "537831", "6994804", "440598", "8116970", "551956", "8094920", "490563", "458814", "443197", "555745", "547408", "7718", "494899", "494888", "535093", "535092", "535091", "542509", "545146", "4750196", "567689", "570588", "568193", "557831", "7718331", "568192", "5493871", "531566", "8657", "7392169", "5581049", "568339", "7373799", "7921841", "8002780", "7962691", "7846780", "5199569", "7962027", "555127", "564641", "6332569", "501275", "7713915", "579045", "1052812", "603729", "290224", "5111569", "580729", "539930", "574664", "574658", "4335271", "574330", "455065", "575882", "490619", "562162", "6968656", "6595262", "461253", "507707", "550276", "537133", "555633", "563924", "570203", "579908", "551002", "551000", "550998", "550995", "550993", "550991", "550990", "550989", "566391", "523101", "528229", "580727", "2985427", "515248", "515247", "648559", "5119952", "580230", "568190", "5140873", "4576593", "4576594", "4045860", "5453608", "6322601", "530389", "548902", "570215", "574954", "539773", "544956", "5239901", "517842", "174807", "578482", "576139", "461714", "553357", "638387", "534366", "506423", "566745", "556789", "485576", "390684", "566921", "4320876", "4320875", "4693271", "28917", "5332635", "4238069", "572154", "572152", "579059", "4054947", "540672", "615532", "4071325", "540665", "440455", "1857963", "5187952", "5231064", "572151", "572150", "579413", "458411", "560314", "154140", "203685", "9057", "549949", "477756", "580730", "4338784", "5134365", "4613927", "4695374", "5229206", "418588", "506927", "577209", "577208", "580290", "576602", "4701571", "566915", "558537", "576784", "573539", "562035", "550872", "527619", "2438", "545233", "3545946", "512648", "3492628", "3164451", "559715", "564921", "554157", "569467", "2634648", "551290", "552548", "580339", "3097254", "571779", "1989711", "4693275", "4503762", "1140", "569725", "578197", "4515553", "2325582", "544285", "533226", "552849", "3085227", "534377", "964244", "578931", "2629597", "4487560", "524318", "581004", "542701", "570642", "579141", "578735", "514835", "558618", "560101", "569464", "2278983", "4518746", "532212", "561807", "561805", "551524", "442717", "4350530", "570188", "559676", "572480", "659149", "614450", "580423", "573644", "569461", "580422", "580421", "580420", "580484", "566544", "580418", "576428", "500650", "566542", "580416", "566541", "570685", "566539", "580579", "566538", "566537", "566536", "566535", "566534", "578279", "566533", "566532", "566531", "566529", "576851", "573185", "577345", "566528", "566527", "566526", "566524", "511287", "579373", "493467", "248732", "493466", "571087", "570411", "579281", "493718", "579392", "574352", "561270", "561271", "561269", "561268", "573699", "560668", "509107", "570948", "513528", "576669", "569044", "568783", "491698", "566219", "576911", "570031", "575368", "572907", "560353", "578893", "569787", "516820", "544813", "544812", "578162", "365956", "576398", "573883", "664147", "576898", "1953349", "537260", "544810", "628507", "2021978", "558300", "625471", "577678", "654806", "654805", "654802", "552932", "576426", "578277", "479488", "479487", "479490", "479489", "575834", "581016", "565343", "545351", "545350", "575052", "450445", "534687", "520652", "520651", "520650", "520647", "520645", "520644", "520643", "530753", "520641", "520640", "458175", "575839", "544819", "544818", "544817", "544816", "544815", "516821", "568310", "568307", "568306", "553330", "553328", "551770", "551768", "614470", "535121", "553027", "366448", "430985", "573065", "573063", "280339", "573230", "547891", "580042", "511745", "580050", "559205", "580862", "573869", "577014", "571188", "580049", "575766", "571008", "580848", "574314", "579837", "574902", "409739", "580041", "575782", "565899", "565897", "570718", "565894", "565893", "565892", "565891", "565890", "562553", "570717", "567386", "577200", "564920", "38932", "574683", "523014", "523982", "531831", "531828", "562637", "562636", "562635", "531826", "531824", "533058", "577327", "527659", "568863", "497325", "513224", "360463", "167932", "569209", "569214", "569213", "569212", "569211", "569240", "569236", "569230", "569227", "569226", "569224", "569221", "569219", "485447", "360462", "561223", "290576", "530138", "561209", "513493", "516031", "11157338", "8963724", "10165993", "573780", "575656", "546719", "541958", "347047", "572708", "5749623", "568202", "571544", "580777", "580771", "568211", "566591", "618245", "532260", "546214", "636521", "532591", "575395", "5165045", "579684", "512749", "563298", "521240", "575564", "580330", "580333", "405296", "238083", "577666", "555151", "555149", "431057", "461251", "579345", "543127", "533631", "564559", "564572", "533626", "579948", "570909", "579941", "563433", "575180", "574192", "579946", "570911", "579940", "578394", "579938", "578583", "580703", "578567", "580686", "580687", "580690", "576803", "576995", "579054", "564924", "552161", "575040", "562656", "569639", "534703", "566939", "566940", "576424", "580442", "580438", "574744", "567478", "449944", "577900", "555334", "9863061", "10083460", "7971402", "11469865", "11150323", "895808", "579139", "575767", "574638", "573781", "569978", "404939", "373271", "156856", "8340758", "2128475", "9950530", "9043124", "9892161", "8471293", "8458709", "5133538", "550330", "1971687", "519016", "10061153", "568501", "568500", "526718", "2345", "476014", "501272", "3134921", "7910118", "588655", "441871", "504676", "5147", "6522907", "6755293", "6428524", "401549", "569976", "569975", "398115", "533636", "482329", "380392", "20544", "530141", "7174686", "532160", "4530525", "7856970", "8114894", "6861715", "522023", "8072758", "367881", "9057614", "580332", "145982", "7506201", "533313", "5587301", "578308", "514026", "4645029", "2483", "9579", "7879914", "561521", "508178", "8295833", "1649969", "7303158", "7857931", "559149", "7850510", "7850500", "573729", "8123167", "551289", "576984", "517599", "532444", "498720", "7975082", "558832", "599757", "10083985", "1837650", "570135", "4322596", "529947", "8047480", "580401", "5105390", "5140827", "8098866", "524514", "528462", "520300", "1108", "3014", "409348", "5189469", "492201", "551870", "567329", "484657", "498562", "565512", "579363", "579368", "505108", "506930", "1965169", "4015054", "4338817", "571038", "580231", "478339", "548918", "557152", "24492", "483880", "4645026", "8305491", "466958", "580761", "3546170", "6803194", "4328311", "7552614", "487710", "6770749", "159453", "517979", "8013574", "5587302", "4663688", "4354349", "613991", "6569369", "575862", "435124", "575970", "438371", "389829", "576252", "399465", "607098", "5322340", "3019", "557610", "9045851", "545226", "11846", "514036", "561522", "541292", "517144", "565950", "186263", "186262", "6770748", "557283", "544934", "566121", "4492700", "4727543", "550146", "9045627", "486466", "1636693", "3495872", "7833593", "4348367", "6999446", "566938", "545212", "5987386", "447100", "8043256", "444500", "551656", "557153", "7912144", "536650", "580847", "145332", "8345484", "8218441", "563711", "558054", "556629", "580186", "4328309", "43930", "579820", "477943", "3310534", "538398", "8639124", "519022", "580836", "575371", "565913", "6833945", "477114", "474899", "407121", "649145", "7264006", "523496", "252499", "534200", "508078", "2642520", "2202318", "415904", "370649", "13813", "567066", "7362362", "534199", "3545087", "76686", "2291232", "649218", "4046252", "425268", "626170", "481730", "5522161", "6075433", "5524554", "570630", "528842", "551615", "3105893", "562163", "558713", "557012", "640404", "534203", "534202", "558831", "491129", "525107", "561492", "575868", "575869", "575872", "580788", "580795", "575874", "5146259", "36047", "456438", "651819", "6766606", "4671475", "573886", "573885", "528493", "37995", "5310052", "545086", "7452574", "8009073", "7962020", "575538", "534273", "534343", "124232", "419761", "5140787", "4520232", "573637", "577059", "6379723", "7340489", "567049", "5748395", "462259", "624687", "543092", "543093", "543094", "575537", "550431", "7976241", "558824", "519191", "4169276", "570047", "579847", "580763", "543135", "543137", "579721", "563259", "403183", "575866", "525104", "32475", "558826", "553861", "580052", "2787", "396402", "105575", "568644", "495196", "506815", "7116492", "69892", "580731", "512833", "573061", "573060", "6995028", "2652", "4965693", "2953677", "515188", "491831", "546334", "4142262", "575393", "575390", "4886", "525106", "2991", "4877199", "505264", "430191", "366848", "568469", "562651", "563857", "469314", "469313", "579819", "530945", "563878", "536744", "419280", "515939", "564804", "442535", "556916", "554634", "518561", "562975", "563233", "495632", "530386", "642363", "539211", "568503", "3181029", "574062", "556630", "478433", "4760326", "4343574", "463428", "505489", "504990", "516987", "670147", "530728", "562145", "397076", "579282", "493681", "579288", "568499", "561831", "530460", "543243", "475246", "524236", "531604", "3281230", "539955", "521962", "561494", "561491", "577552", "567653", "13570", "526583", "5158040", "63168", "437555", "460591", "541485", "4760329", "689871", "9174", "506814", "540676", "4500441", "501343", "496578", "546779", "555975", "488584", "454618", "3545086", "556628", "398318", "6802399", "573609", "529098", "506565", "507894", "479701", "505840", "560302", "544239", "544238", "573611", "573610", "548182", "572816", "476535", "452003", "2295288", "5140665", "537717", "536473", "5517335", "486012", "504729", "580841", "550202", "580758", "7673", "568497", "368122", "434612", "521961", "549343", "500105", "476767", "523749", "428090", "573643", "575784", "577202", "577550", "575751", "580458", "389656", "377131", "460835", "4320860", "425264", "529945", "490118", "1413", "2048489", "1054221", "425267", "6545526", "6746556", "512650", "551149", "578873", "542702", "523097", "662675", "562986", "532445", "533316", "15596", "427876", "573388", "6625388", "577902", "573801", "525230", "579906", "577721", "562653", "4322859", "572853", "558970", "4169285", "518500", "458871", "519760", "576293", "518310", "4011902", "430504", "568072", "558827", "4936913", "131737", "441445", "561829", "529946", "574828", "509935", "18390", "6415306", "577684", "425266", "577675", "526898", "468435", "450774", "545140", "469558", "7520", "496461", "572373", "552935", "577203", "373274", "543139", "462639", "534098", "480668", "1537", "573612", "446139", "557035", "515327", "465583", "574714", "461275", "3017259", "534217", "548184", "522412", "540674", "4955272", "427536", "441280", "605270", "515241", "572051", "538437", "573790", "541752", "536344", "573605", "462652", "577336", "450768", "449993", "461274", "473664", "5409103", "543138", "578767", "438373", "562603", "489222", "566933", "563877", "4353321", "28950", "573851", "575865", "576478", "507363", "519762", "519759", "580452", "553425", "558822", "576129", "579817", "574412", "574411", "574413", "526227", "2830991", "575637", "505655", "587424", "579416", "580397", "479026", "512653", "579421", "566446", "5675281", "5645883", "574410", "576477", "503615", "485552", "485550", "519758", "485186", "4253", "528272", "459904", "447101", "106158", "572335", "521816", "533308", "3133268", "5191178", "620297", "580755", "3181028", "458809", "551130", "537598", "466533", "562546", "433146", "511992", "521815", "579034", "43690", "90023", "4684249", "462256", "462255", "558716", "559585", "534341", "526984", "577557", "561514", "537156", "446427", "563853", "580456", "580454", "563876", "514891", "540664", "540656", "469315", "529328", "362243", "579904", "4503592", "2808238", "546555", "546554", "1054207", "7892", "7900", "611239", "538302", "578275", "522432", "521542", "484659", "473480", "538301", "454032", "422647", "432798", "509111", "572105", "529329", "449385", "575617", "1395262", "579220", "574409", "5543", "509934", "476766", "509933", "528301", "501344", "533318", "560707", "486212", "29244", "578243", "514753", "5231525", "493228", "388705", "578786", "1972023", "308263", "4653832", "106404", "440596", "515922", "481519", "450582", "450581", "5148513", "410736", "441870", "576173", "578460", "529327", "523545", "103", "517338", "70258", "547379", "486211", "568495", "5100918", "500103", "567058", "513094", "2954034", "2307496", "483870", "444474", "573616", "67703", "501640", "453640", "554418", "566445", "531001", "567047", "567060", "543434", "566923", "567052", "568981", "589744", "576926", "576593", "528844", "570614", "573140", "555314", "465391", "568272", "540112", "567775", "578147", "2920", "553408", "517463", "570328", "567037", "558505", "549277", "567240", "388601", "551780", "565056", "508621", "537608", "564453", "452979", "570149", "534088", "578932", "570714", "539956", "491207", "4742688", "551218", "551217", "571092", "3038467", "573134", "583716", "578342", "580820", "573138", "3134918", "566444", "573130", "562655", "485187", "562652", "4789450", "476021", "476020", "558230", "527117", "580839", "538773", "545958", "1754", "552287", "555884", "561523", "507783", "477941", "640230", "574230", "544358", "2366684", "569649", "573151", "4091562", "2890258", "519542", "574706", "580170", "551268", "575591", "555850", "544359", "458205", "43681", "521842", "400720", "466920", "558518", "491442", "541685", "575081", "501879", "509646", "578315", "550283", "575781", "580400", "573642", "533314", "570839", "570949", "385770", "576128", "576126", "548181", "548179", "575075", "580395", "506183", "465582", "574305", "1576", "576012", "535424", "455716", "570943", "575783", "580459", "566934", "579945", "2953663", "479694", "562486", "564923", "564922", "566512", "518632", "548482", "479341", "578600", "576542", "538218", "452974", "533059", "529951", "575330", "539051", "453917", "454979", "481163", "578746", "509245", "373276", "442715", "498563", "578026", "564846", "523495", "538486", "567327", "580673", "3003405", "512818", "564121", "495676", "573863", "570666", "509110", "509109", "537781", "567062", "573614", "579308", "580672", "577581", "577580", "470586", "393706", "580757", "576960", "580760", "559722", "575630", "575628", "572922", "575629", "548153", "11465396", "11465643", "11526672", "9876966", "340447", "10160923", "4718591", "8986779", "11239011", "8415", "8042095", "11196055", "10161392", "8998855", "522372", "11170247", "11103941", "11101549", "418103", "405504", "11069551", "7990624", "500194", "10784510", "572754", "408861", "10776159", "10844165", "10765661", "9834547", "10776268", "530709", "10751333", "123232", "8340496", "9743934", "326254", "10030930", "2687270", "10017787", "10015062", "7924850", "6991393", "4576", "5105336", "9729214", "9687346", "8075165", "659208", "554526", "8301773", "8300930", "5496894", "368799", "8130857", "500612", "5074", "7122746", "7970800", "447250", "7923158", "531471", "236674", "578385", "8176", "433964", "1609319", "58445", "31501", "7901840", "7392850", "7362424", "6712463", "559065", "3350180", "7230812", "511487", "4061823", "521055", "545225", "533870", "550851", "143005", "457481", "4726532", "485484", "4345064", "5564715", "5592897", "549101", "5532195", "1935199", "5309695", "5522174", "3051133", "4564882", "4136768", "562607", "4997117", "566774", "551288", "12529", "266817", "526145", "506062", "465263", "651816", "573269", "5083", "538717", "457431", "548778", "4328327", "92181", "409179", "4343539", "630494", "527736", "445389", "551945", "373275", "554972", "365295", "437420", "478292", "9772", "488500", "3377669", "2842", "1973937", "619756", "560519", "4412", "386511", "241899", "645669", "527815", "473596", "583", "485066", "82440", "523591", "248271", "443873"] #fetch_ids
    bookdatas = fetch_bookdata_json(ids)
    return bookdatas
  end

  def load_text(text_path)
    if File.exist?(text_path)
      arr = []
      File.open(text_path, 'r') do |f|
        f.each_line do |line|
          arr << eval(line)
        end
      end
      return arr
    else
      $log.error("#{text_path} does not exist!")
      exit(1)
    end
  end

  def save_to_text(bookdatas, path)
    # if File.exist?(text_path)
    #   $log.error("#{text_path} already exists.")
    # else
      File.open("#{path}.txt", 'w') do |f|
        f.puts bookdatas
      end
      $log.info("#{path}.txt is saved.")
    # end
  end

  def save_to_csv(lines, path)
    # if File.exist?(text_path)
    #   $log.error("#{text_path} already exists.")
    # else
      CSV.open("#{path}.csv", "w:windows-31j", force_quotes: true) do |file|
        lines.each { |row| file << row }
      end
      $log.info("#{path}.csv is saved.")
    # end
  end

  def save_bookdatas(bookdatas)
    text_path = "#{@user_id}_bookdata_#{Time.now.strftime('%F')}"
    # t = load_text(text_path)
    save_to_text(bookdatas, text_path)
  end

  def save_chunks_to_csv(bookdatas, data_each_chunk, path, service)
    # data_each_chunk個ずつファイルを分割
    book_num = bookdatas.size
    chunk_num = (book_num / data_each_chunk).to_i
    (0..chunk_num).each do |ci| # data_each_chunk個ずつファイルを分割
      start_n = 100 * ci
      if start_n + 99 <= book_num
        end_n = start_n + 99
      else
        end_n = book_num - start_n
      end
      range = bookdatas[start_n..end_n]
      lines = send("temp_#{service}", range)
      text_path = "#{path}_#{'%02d' % ci}"
      save_to_csv(lines, text_path)
    end
  end

  def convert_bookdatas(bookdatas, service)
    lines = []
    text_path = "#{@user_id}_#{service}_#{Time.now.strftime('%F')}"

    case service
      when 'booklog'
        save_chunks_to_csv(bookdatas, 100, text_path, 'booklog')
      when 'mediamarker'
        save_chunks_to_csv(bookdatas, 100, text_path, 'mediamarker')
      when 'biblia'
        lines = temp_biblia(bookdatas)
        save_to_csv(lines, text_path)
      when 'debug'
        lines = temp_debug(bookdatas)
      else
        puts '正しいサービスIDを指定してください'
        exit(1)
    end
  end

  def temp_biblia(bookdatas)
    out = []
    ndate = Time.now.strftime("%D")
    bookdatas.each do |book|
      case book['status'].max # 本棚(0)/読みたい(1)
        when 4, 3, 2 then status = 0
        when 1 then       status = 1
        else              status = 1
      end
      title     = book['book']['title']
      author    = book['author']
      isbn13    = book['book']['asin'] #convert_asin_to_isbn13(book['book']]['asin'])
      rdate     = book['review']['read_at'].nil?  ? '' : book['review']['read_at'].gsub('-','/')
      tag       = book['bookcases'].nil?          ? '' : book['bookcases']
      review    = book['review']['text'].nil?     ? '' : book['review']['text']
      image_url = book['book']['image_url'].nil?  ? '' : book['book']['image_url']
      store_url = book['book']['amazon_url'].nil? ? '' : book['book']['amazon_url']
      r         = tag.select{ |i| i.include?('☆') }
      rank      = r[0].to_s.gsub('☆','').to_i

      out << [title, nil, author, nil, nil, isbn13, rdate, tag, review, image_url, store_url, ndate, status, rank]
      #タイトル, タイトル仮名(※未使用), 著者, 著者仮名(※未使用), 出版社, ISBN-13, 日付(yyyy/MM/dd), メモ=>タグ, 感想, 表紙画像URL, 楽天商品リンク, データ登録日(yyyy/mm/dd), 本棚(0)/読みたい(1), 星評価(0〜5)
    end
    return out
  end

  def temp_booklog(bookdatas)
    out = []
    ndate = Time.now.strftime("%D")
    bookdatas.each do |book|
      case book['status'].max
        when 4 then status_text = '読み終わった'
        when 3 then status_text = 'いま読んでる'
        when 2 then status_text = '積読'
        when 1 then status_text = '読みたい'
        else        status_text = ''
      end
      asin   = book['book']['asin']
      isbn13 = convert_asin_to_isbn13(asin)
      tag    = book['bookcases'].nil? ? '' : book['bookcases']
      r      = tag.select{ |i| i.include?('☆') }
      rank   = r[0].to_s.gsub('☆','').to_i
      review = book['review']['text'].nil? ? '' : book['review']['text'].sjisable
      rdate  = "#{book['review']['read_at']} 00:00:00"

      out << ['1', asin, nil, '-', rank, status_text, review, tag, nil, ndate, rdate]
      # サービスID[Amzn], アイテムID, 13桁ISBN, カテゴリ, 評価, 読書状況, レビュー, タグ, 読書メモ(非公開), 登録日時, 読了日
    end
    return out
  end

  def temp_mediamarker(bookdatas)
    out = []
    bookdatas.each do |book|
      case book['status'].max
        when 4 then status_text = '読み終わった'
        when 3 then status_text = 'いま読んでる'
        when 2 then status_text = '積読'
        when 1 then status_text = '読みたい'
        else        status_text = ''
      end
      asin    = book['book']['asin']
      tag     = book['bookcases'].nil? ? '' : book['bookcases'].join('、')
      comment = "#{status_text}／#{book['review']['text']}／#{tag}／読了:#{book['review']['read_at']}"
      out << [asin, comment]
    end
    return out
  end

  def temp_debug(bookdatas)
    out = bookdatas[0]
  end

  def convert_asin_to_isbn13(asin) #AmazonAPI使って変換
    isbn13 = asin
    return isbn13
  end

end
#class BookInfo end

bi = BookInfo.new
bookdatas = bi.scrape
bi.save_bookdatas(bookdatas)
# bookdatas = bi.load_text('33029_bookdata_2017-03-06.txt')
# bi.convert_bookdatas(bookdatas, 'mediamarker')